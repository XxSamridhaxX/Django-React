username: abcd1234
email: abcd1234@gmail.com
password: abcd1234



after putting LOGIN.as_view() we should also put LOGOUT_REDIRECT_URL = 'login' in settings.py
that tells django about where to redirect after successful login.


API post:
The POST endpoint in our API allows authenticated users to create new Person entries. When a user sends a POST request to this endpoint, they must include data such as the person's name, email, and phone number in the request body, formatted as JSON. This data is captured using Django REST Framework's request.data object.

To process this incoming data, we use the PersonSerializer, which validates the input based on the rules defined in our model. For example, it checks whether all required fields are present and if the email is in a proper format. If the data passes validation, the serializer proceeds to save the new Person object to the database.

A crucial step here is associating the newly created Person with the currently logged-in user. We do this explicitly by passing user=request.user to the serializer.save() method. This ensures that every person record is linked to the user who created it, making it possible to later filter and retrieve data user-wise.

If the object is successfully created, the API responds with a JSON representation of the new person along with a 201 Created status code. However, if validation fails, it returns a clear explanation of what went wrong (like missing fields or invalid formats) with a 400 Bad Request status.

This setup allows users to manage their own directory of contacts while ensuring data integrity and secure user association in the backend.


day5:(6/9/2025) starting authtication token
add rest_framework and rest_framework.authtoken in installed app in settings.py
added this at the bottom of settings.py to enable token REST_FRAMEWORK = {

using postman for get first get token for corresponding user
then for get request use 
Authorization: Token 123dc54b17bc2122496e222130abcaf8248b18db

so till now we did manual getting of tokens right but how to make it automatic? Next this is our task
Today we'll do 3 things 
1: Automatically generate token 
2. create a login api view 
3. test token auth api with postman

2. create a login api view 
we create a token when we create a user first time but each time he logs in we are only interested in the users token so in order to implelemnt this we get this view function

aaba hamle euta custom_login() bhanne euta function banaunu parcha kinaki yo euta api ko end point huncha for login purpose ko lai like from end(react)
bata hamle login garna khojda simply login form use garera matra naya user banauna hudaina login form bhaneko session ko lai matra beneficiary huncha 
tra user lai ta hamle securely login garaunu parcha tesai le hamle token system use garcham harek time user le login garcha hamle tesko token regenerate(same token) dinu parcha.
HOW it works is that first time register garda token generate garera user lai dincha. user ko local db or browser ma store huncha
so arko choti login garda pheri pw dinu pardeina tei token le login garna milcha plus token compromize bhaye ni pw compromise hudeina so arko time tei token le use garcham


6/10/2025 (maybe day 6) due to power outage and went out khasai kei garna payena react start gariyo ali ali heriyo

6/11/2025
Today I got to learnt about axios
So what is Axios? 
Axios is a react library which is used as HTTP client to send request like POST, GET, PUT http requests which helps to communicate with the server.
Also, Get data (like fetching user info from an API),Send data (like submitting a form),Delete or update data on a server
so why not use traditional fetch()?
The reason is that Axios provides better structure, error handling, Automatic Json Parsing etc

1st: User Authentication & Token Storage

learnt about promises,async and wait prior to doing this

| Step | Topic                                                              |
| ---- | ------------------------------------------------------------------ |
| ✅ 1  | Build a React login form (`Login.jsx`)                             |
| ✅ 2  | Send login data to Django, get the token                           |
| ✅ 3  | Store token in `localStorage`                                      |
| ✅ 4  | Use token in future POST/GET requests (auth header)                |
| ⏭️ 5 | After that, build the full `PersonForm` using the stored user info |


Hamle backend ma data ta pathayeu form bata but euta problem aajha pani aucha CORS error bhanne 
CORS(CROSS Origin Resource Sharing) bhaneko component(middleware) ho which is required when web application running on one domain
tries to access the resource from a different domain
CORS are protocol to integrate applications

so we need to allow CORS so that front end can use your api
TO INSTALL DJANGO CORS:
1) pip install django-cors-headers
2) put it in installed app
3) add these to middlewarecorsheaders.middleware.CorsMiddleware',
       'django.middleware.common.CommonMiddleware',
       yo middleware maddhe ko sab bhanda top ma hunu parcha 
4) CORS_ORIGIN_ALLOW_ALL = True put this at the bottom of settings.py 
if you want to only allow specific origins then
CORS_ORIGIN_WHITELIST = [
         'http://localhost:3000',  # Your React app's URL
         'http://127.0.0.1:3000',
         # Add other allowed origins
     ] 
5)CORS_ALLOW_CREDENTIALS = True means credentials exchange garna milcha bhancha


6/13/2025
Today I'm gonna learn about react router.
(written in copy)
Also learned about Link and useNavigation(hook)
created navbar
learned about privateRoute
peoplepage that displays all the people
create person form that will be used to insert people into the db into the specific user we use get request using axios with body as the data and headers that has authentication information 
plus
I've learned to get specific data using jsx component PersonDetail.jsx
it uses new hook by the way but dont get freaked out its easy to learn
we define dynamic path in get person like 'person/:id' where id is dynamic
so useParams just extracts the id thats after:
and in the path of axios we write ${id} at last and that's all the concept I need to know